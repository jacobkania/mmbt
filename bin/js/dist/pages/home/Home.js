/* src/pages/home/Home.svelte generated by Svelte v3.31.0 */
import {
	SvelteComponent,
	append,
	create_component,
	destroy_component,
	detach,
	element,
	init,
	insert,
	mount_component,
	safe_not_equal,
	set_data,
	space,
	text,
	transition_in,
	transition_out
} from "../../../web_modules/svelte/internal.js";

import Card from "../../../web_modules/@smui/card.js";
import Button from "../../../web_modules/@smui/button.js";

function create_default_slot_1(ctx) {
	let t;

	return {
		c() {
			t = text("Click me");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (15:0) <Card>
function create_default_slot(ctx) {
	let t0;
	let t1;

	return {
		c() {
			t0 = text("Fancy card clicks: ");
			t1 = text(/*clicked*/ ctx[0]);
		},
		m(target, anchor) {
			insert(target, t0, anchor);
			insert(target, t1, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*clicked*/ 1) set_data(t1, /*clicked*/ ctx[0]);
		},
		d(detaching) {
			if (detaching) detach(t0);
			if (detaching) detach(t1);
		}
	};
}

function create_fragment(ctx) {
	let button;
	let t0;
	let div;
	let t1;
	let t2;
	let t3;
	let card;
	let current;

	button = new Button({
			props: {
				variant: "raised",
				color: "primary",
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			}
		});

	button.$on("click", /*click_handler*/ ctx[1]);

	card = new Card({
			props: {
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(button.$$.fragment);
			t0 = space();
			div = element("div");
			t1 = text("Clicks: ");
			t2 = text(/*clicked*/ ctx[0]);
			t3 = space();
			create_component(card.$$.fragment);
		},
		m(target, anchor) {
			mount_component(button, target, anchor);
			insert(target, t0, anchor);
			insert(target, div, anchor);
			append(div, t1);
			append(div, t2);
			insert(target, t3, anchor);
			mount_component(card, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const button_changes = {};

			if (dirty & /*$$scope*/ 4) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
			if (!current || dirty & /*clicked*/ 1) set_data(t2, /*clicked*/ ctx[0]);
			const card_changes = {};

			if (dirty & /*$$scope, clicked*/ 5) {
				card_changes.$$scope = { dirty, ctx };
			}

			card.$set(card_changes);
		},
		i(local) {
			if (current) return;
			transition_in(button.$$.fragment, local);
			transition_in(card.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(button.$$.fragment, local);
			transition_out(card.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(button, detaching);
			if (detaching) detach(t0);
			if (detaching) detach(div);
			if (detaching) detach(t3);
			destroy_component(card, detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let clicked = 0;
	const click_handler = () => $$invalidate(0, clicked++, clicked);
	return [clicked, click_handler];
}

class Home extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default Home;