import './App.css.proxy.js';
/* src/App.svelte generated by Svelte v3.31.0 */
import {
	SvelteComponent,
	append,
	attr,
	create_component,
	destroy_component,
	detach,
	element,
	init,
	insert,
	mount_component,
	safe_not_equal,
	space,
	text,
	transition_in,
	transition_out
} from "../web_modules/svelte/internal.js";

import { Route } from "../web_modules/tinro.js";
import Home from "./pages/home/Home.js";
import Overview from "./pages/overview/Overview.js";
import TopNav from "./components/nav/TopNav.js";

function create_default_slot_3(ctx) {
	let home;
	let current;
	home = new Home({});

	return {
		c() {
			create_component(home.$$.fragment);
		},
		m(target, anchor) {
			mount_component(home, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(home.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(home.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(home, detaching);
		}
	};
}

// (21:6) <Route path="/overview">
function create_default_slot_2(ctx) {
	let overview;
	let current;
	overview = new Overview({});

	return {
		c() {
			create_component(overview.$$.fragment);
		},
		m(target, anchor) {
			mount_component(overview, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(overview.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(overview.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(overview, detaching);
		}
	};
}

// (24:6) <Route fallback>
function create_default_slot_1(ctx) {
	let t;

	return {
		c() {
			t = text("NOTHIN");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (14:0) <Route>
function create_default_slot(ctx) {
	let div1;
	let topnav;
	let t0;
	let div0;
	let route0;
	let t1;
	let route1;
	let t2;
	let route2;
	let current;
	topnav = new TopNav({});

	route0 = new Route({
			props: {
				path: "/",
				$$slots: { default: [create_default_slot_3] },
				$$scope: { ctx }
			}
		});

	route1 = new Route({
			props: {
				path: "/overview",
				$$slots: { default: [create_default_slot_2] },
				$$scope: { ctx }
			}
		});

	route2 = new Route({
			props: {
				fallback: true,
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			div1 = element("div");
			create_component(topnav.$$.fragment);
			t0 = space();
			div0 = element("div");
			create_component(route0.$$.fragment);
			t1 = space();
			create_component(route1.$$.fragment);
			t2 = space();
			create_component(route2.$$.fragment);
			attr(div1, "class", "main svelte-103jgu9");
			attr(div1, "id", "main");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			mount_component(topnav, div1, null);
			append(div1, t0);
			append(div1, div0);
			mount_component(route0, div0, null);
			append(div0, t1);
			mount_component(route1, div0, null);
			append(div0, t2);
			mount_component(route2, div0, null);
			current = true;
		},
		p(ctx, dirty) {
			const route0_changes = {};

			if (dirty & /*$$scope*/ 1) {
				route0_changes.$$scope = { dirty, ctx };
			}

			route0.$set(route0_changes);
			const route1_changes = {};

			if (dirty & /*$$scope*/ 1) {
				route1_changes.$$scope = { dirty, ctx };
			}

			route1.$set(route1_changes);
			const route2_changes = {};

			if (dirty & /*$$scope*/ 1) {
				route2_changes.$$scope = { dirty, ctx };
			}

			route2.$set(route2_changes);
		},
		i(local) {
			if (current) return;
			transition_in(topnav.$$.fragment, local);
			transition_in(route0.$$.fragment, local);
			transition_in(route1.$$.fragment, local);
			transition_in(route2.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(topnav.$$.fragment, local);
			transition_out(route0.$$.fragment, local);
			transition_out(route1.$$.fragment, local);
			transition_out(route2.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			destroy_component(topnav);
			destroy_component(route0);
			destroy_component(route1);
			destroy_component(route2);
		}
	};
}

function create_fragment(ctx) {
	let route;
	let current;

	route = new Route({
			props: {
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(route.$$.fragment);
		},
		m(target, anchor) {
			mount_component(route, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const route_changes = {};

			if (dirty & /*$$scope*/ 1) {
				route_changes.$$scope = { dirty, ctx };
			}

			route.$set(route_changes);
		},
		i(local) {
			if (current) return;
			transition_in(route.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(route.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(route, detaching);
		}
	};
}

class App extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, null, create_fragment, safe_not_equal, {});
	}
}

export default App;